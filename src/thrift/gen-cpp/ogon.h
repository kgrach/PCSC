/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ogon_H
#define ogon_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "ogon_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ogonIf {
 public:
  virtual ~ogonIf() {}
  virtual void EstablishContext(return_ec& _return, const DWORD_RPC dwScope) = 0;
  virtual LONG_RPC ReleaseContext(const SCARDCONTEXT_RPC hContext) = 0;
  virtual void ListReaders(return_lr& _return, const SCARDCONTEXT_RPC hContext, const DWORD_RPC pcchReaders) = 0;
  virtual void ListReaderGroups(return_lrg& _return, const SCARDCONTEXT_RPC hContext, const DWORD_RPC pcchGroups) = 0;
  virtual void Connect(return_c& _return, const SCARDCONTEXT_RPC hContext, const LPCSTR_RPC& szReader, const DWORD_RPC dwShareMode, const DWORD_RPC dwPreferredProtocols) = 0;
  virtual void Reconnect(return_r& _return, const SCARDHANDLE_RPC hCard, const DWORD_RPC dwShareMode, const DWORD_RPC dwPreferredProtocols, const DWORD_RPC dwInitialization) = 0;
  virtual LONG_RPC Disconnect(const SCARDHANDLE_RPC hCard, const DWORD_RPC dwDisposition) = 0;
  virtual void Status(return_s& _return, const SCARDHANDLE_RPC hCard, const DWORD_RPC pcchReaderLen, const DWORD_RPC pcbAtrLen) = 0;
  virtual void GetStatusChange(return_gsc& _return, const SCARDCONTEXT_RPC hContext, const DWORD_RPC dwTimeout, const std::vector<scard_readerstate_rpc> & rgReaderStates, const DWORD_RPC cReaders) = 0;
  virtual void Transmit(return_t& _return, const SCARDHANDLE_RPC hCard, const scard_io_request_rpc& pioSendPci, const LPBYTE_RPC& pbSendBuffer, const DWORD_RPC pcbRecvLength) = 0;
  virtual LONG_RPC BeginTransaction(const SCARDHANDLE_RPC hCard) = 0;
  virtual LONG_RPC EndTransaction(const SCARDHANDLE_RPC hCard, const DWORD_RPC dwDisposition) = 0;
  virtual void GetAttrib(return_ga& _return, const SCARDHANDLE_RPC hCard, const DWORD_RPC dwAttrId, const DWORD_RPC pcbAttrLen) = 0;
  virtual void Control(return_ctrl& _return, const SCARDHANDLE_RPC hCard, const DWORD_RPC dwControlCode, const LPVOID_RPC& pbSendBuffer, const DWORD_RPC cbRecvLength) = 0;
  virtual LONG_RPC Cancel(const SCARDCONTEXT_RPC hContext) = 0;
  virtual LONG_RPC IsValidContext(const SCARDCONTEXT_RPC hContext) = 0;
};

class ogonIfFactory {
 public:
  typedef ogonIf Handler;

  virtual ~ogonIfFactory() {}

  virtual ogonIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ogonIf* /* handler */) = 0;
};

class ogonIfSingletonFactory : virtual public ogonIfFactory {
 public:
  ogonIfSingletonFactory(const ::std::shared_ptr<ogonIf>& iface) : iface_(iface) {}
  virtual ~ogonIfSingletonFactory() {}

  virtual ogonIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ogonIf* /* handler */) {}

 protected:
  ::std::shared_ptr<ogonIf> iface_;
};

class ogonNull : virtual public ogonIf {
 public:
  virtual ~ogonNull() {}
  void EstablishContext(return_ec& /* _return */, const DWORD_RPC /* dwScope */) {
    return;
  }
  LONG_RPC ReleaseContext(const SCARDCONTEXT_RPC /* hContext */) {
    LONG_RPC _return = 0;
    return _return;
  }
  void ListReaders(return_lr& /* _return */, const SCARDCONTEXT_RPC /* hContext */, const DWORD_RPC /* pcchReaders */) {
    return;
  }
  void ListReaderGroups(return_lrg& /* _return */, const SCARDCONTEXT_RPC /* hContext */, const DWORD_RPC /* pcchGroups */) {
    return;
  }
  void Connect(return_c& /* _return */, const SCARDCONTEXT_RPC /* hContext */, const LPCSTR_RPC& /* szReader */, const DWORD_RPC /* dwShareMode */, const DWORD_RPC /* dwPreferredProtocols */) {
    return;
  }
  void Reconnect(return_r& /* _return */, const SCARDHANDLE_RPC /* hCard */, const DWORD_RPC /* dwShareMode */, const DWORD_RPC /* dwPreferredProtocols */, const DWORD_RPC /* dwInitialization */) {
    return;
  }
  LONG_RPC Disconnect(const SCARDHANDLE_RPC /* hCard */, const DWORD_RPC /* dwDisposition */) {
    LONG_RPC _return = 0;
    return _return;
  }
  void Status(return_s& /* _return */, const SCARDHANDLE_RPC /* hCard */, const DWORD_RPC /* pcchReaderLen */, const DWORD_RPC /* pcbAtrLen */) {
    return;
  }
  void GetStatusChange(return_gsc& /* _return */, const SCARDCONTEXT_RPC /* hContext */, const DWORD_RPC /* dwTimeout */, const std::vector<scard_readerstate_rpc> & /* rgReaderStates */, const DWORD_RPC /* cReaders */) {
    return;
  }
  void Transmit(return_t& /* _return */, const SCARDHANDLE_RPC /* hCard */, const scard_io_request_rpc& /* pioSendPci */, const LPBYTE_RPC& /* pbSendBuffer */, const DWORD_RPC /* pcbRecvLength */) {
    return;
  }
  LONG_RPC BeginTransaction(const SCARDHANDLE_RPC /* hCard */) {
    LONG_RPC _return = 0;
    return _return;
  }
  LONG_RPC EndTransaction(const SCARDHANDLE_RPC /* hCard */, const DWORD_RPC /* dwDisposition */) {
    LONG_RPC _return = 0;
    return _return;
  }
  void GetAttrib(return_ga& /* _return */, const SCARDHANDLE_RPC /* hCard */, const DWORD_RPC /* dwAttrId */, const DWORD_RPC /* pcbAttrLen */) {
    return;
  }
  void Control(return_ctrl& /* _return */, const SCARDHANDLE_RPC /* hCard */, const DWORD_RPC /* dwControlCode */, const LPVOID_RPC& /* pbSendBuffer */, const DWORD_RPC /* cbRecvLength */) {
    return;
  }
  LONG_RPC Cancel(const SCARDCONTEXT_RPC /* hContext */) {
    LONG_RPC _return = 0;
    return _return;
  }
  LONG_RPC IsValidContext(const SCARDCONTEXT_RPC /* hContext */) {
    LONG_RPC _return = 0;
    return _return;
  }
};

typedef struct _ogon_EstablishContext_args__isset {
  _ogon_EstablishContext_args__isset() : dwScope(false) {}
  bool dwScope :1;
} _ogon_EstablishContext_args__isset;

class ogon_EstablishContext_args {
 public:

  ogon_EstablishContext_args(const ogon_EstablishContext_args&);
  ogon_EstablishContext_args& operator=(const ogon_EstablishContext_args&);
  ogon_EstablishContext_args() : dwScope(0) {
  }

  virtual ~ogon_EstablishContext_args() noexcept;
  DWORD_RPC dwScope;

  _ogon_EstablishContext_args__isset __isset;

  void __set_dwScope(const DWORD_RPC val);

  bool operator == (const ogon_EstablishContext_args & rhs) const
  {
    if (!(dwScope == rhs.dwScope))
      return false;
    return true;
  }
  bool operator != (const ogon_EstablishContext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_EstablishContext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ogon_EstablishContext_pargs {
 public:


  virtual ~ogon_EstablishContext_pargs() noexcept;
  const DWORD_RPC* dwScope;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_EstablishContext_result__isset {
  _ogon_EstablishContext_result__isset() : success(false) {}
  bool success :1;
} _ogon_EstablishContext_result__isset;

class ogon_EstablishContext_result {
 public:

  ogon_EstablishContext_result(const ogon_EstablishContext_result&);
  ogon_EstablishContext_result& operator=(const ogon_EstablishContext_result&);
  ogon_EstablishContext_result() {
  }

  virtual ~ogon_EstablishContext_result() noexcept;
  return_ec success;

  _ogon_EstablishContext_result__isset __isset;

  void __set_success(const return_ec& val);

  bool operator == (const ogon_EstablishContext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ogon_EstablishContext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_EstablishContext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_EstablishContext_presult__isset {
  _ogon_EstablishContext_presult__isset() : success(false) {}
  bool success :1;
} _ogon_EstablishContext_presult__isset;

class ogon_EstablishContext_presult {
 public:


  virtual ~ogon_EstablishContext_presult() noexcept;
  return_ec* success;

  _ogon_EstablishContext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ogon_ReleaseContext_args__isset {
  _ogon_ReleaseContext_args__isset() : hContext(false) {}
  bool hContext :1;
} _ogon_ReleaseContext_args__isset;

class ogon_ReleaseContext_args {
 public:

  ogon_ReleaseContext_args(const ogon_ReleaseContext_args&);
  ogon_ReleaseContext_args& operator=(const ogon_ReleaseContext_args&);
  ogon_ReleaseContext_args() : hContext(0) {
  }

  virtual ~ogon_ReleaseContext_args() noexcept;
  SCARDCONTEXT_RPC hContext;

  _ogon_ReleaseContext_args__isset __isset;

  void __set_hContext(const SCARDCONTEXT_RPC val);

  bool operator == (const ogon_ReleaseContext_args & rhs) const
  {
    if (!(hContext == rhs.hContext))
      return false;
    return true;
  }
  bool operator != (const ogon_ReleaseContext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_ReleaseContext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ogon_ReleaseContext_pargs {
 public:


  virtual ~ogon_ReleaseContext_pargs() noexcept;
  const SCARDCONTEXT_RPC* hContext;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_ReleaseContext_result__isset {
  _ogon_ReleaseContext_result__isset() : success(false) {}
  bool success :1;
} _ogon_ReleaseContext_result__isset;

class ogon_ReleaseContext_result {
 public:

  ogon_ReleaseContext_result(const ogon_ReleaseContext_result&);
  ogon_ReleaseContext_result& operator=(const ogon_ReleaseContext_result&);
  ogon_ReleaseContext_result() : success(0) {
  }

  virtual ~ogon_ReleaseContext_result() noexcept;
  LONG_RPC success;

  _ogon_ReleaseContext_result__isset __isset;

  void __set_success(const LONG_RPC val);

  bool operator == (const ogon_ReleaseContext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ogon_ReleaseContext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_ReleaseContext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_ReleaseContext_presult__isset {
  _ogon_ReleaseContext_presult__isset() : success(false) {}
  bool success :1;
} _ogon_ReleaseContext_presult__isset;

class ogon_ReleaseContext_presult {
 public:


  virtual ~ogon_ReleaseContext_presult() noexcept;
  LONG_RPC* success;

  _ogon_ReleaseContext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ogon_ListReaders_args__isset {
  _ogon_ListReaders_args__isset() : hContext(false), pcchReaders(false) {}
  bool hContext :1;
  bool pcchReaders :1;
} _ogon_ListReaders_args__isset;

class ogon_ListReaders_args {
 public:

  ogon_ListReaders_args(const ogon_ListReaders_args&);
  ogon_ListReaders_args& operator=(const ogon_ListReaders_args&);
  ogon_ListReaders_args() : hContext(0), pcchReaders(0) {
  }

  virtual ~ogon_ListReaders_args() noexcept;
  SCARDCONTEXT_RPC hContext;
  DWORD_RPC pcchReaders;

  _ogon_ListReaders_args__isset __isset;

  void __set_hContext(const SCARDCONTEXT_RPC val);

  void __set_pcchReaders(const DWORD_RPC val);

  bool operator == (const ogon_ListReaders_args & rhs) const
  {
    if (!(hContext == rhs.hContext))
      return false;
    if (!(pcchReaders == rhs.pcchReaders))
      return false;
    return true;
  }
  bool operator != (const ogon_ListReaders_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_ListReaders_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ogon_ListReaders_pargs {
 public:


  virtual ~ogon_ListReaders_pargs() noexcept;
  const SCARDCONTEXT_RPC* hContext;
  const DWORD_RPC* pcchReaders;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_ListReaders_result__isset {
  _ogon_ListReaders_result__isset() : success(false) {}
  bool success :1;
} _ogon_ListReaders_result__isset;

class ogon_ListReaders_result {
 public:

  ogon_ListReaders_result(const ogon_ListReaders_result&);
  ogon_ListReaders_result& operator=(const ogon_ListReaders_result&);
  ogon_ListReaders_result() {
  }

  virtual ~ogon_ListReaders_result() noexcept;
  return_lr success;

  _ogon_ListReaders_result__isset __isset;

  void __set_success(const return_lr& val);

  bool operator == (const ogon_ListReaders_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ogon_ListReaders_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_ListReaders_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_ListReaders_presult__isset {
  _ogon_ListReaders_presult__isset() : success(false) {}
  bool success :1;
} _ogon_ListReaders_presult__isset;

class ogon_ListReaders_presult {
 public:


  virtual ~ogon_ListReaders_presult() noexcept;
  return_lr* success;

  _ogon_ListReaders_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ogon_ListReaderGroups_args__isset {
  _ogon_ListReaderGroups_args__isset() : hContext(false), pcchGroups(false) {}
  bool hContext :1;
  bool pcchGroups :1;
} _ogon_ListReaderGroups_args__isset;

class ogon_ListReaderGroups_args {
 public:

  ogon_ListReaderGroups_args(const ogon_ListReaderGroups_args&);
  ogon_ListReaderGroups_args& operator=(const ogon_ListReaderGroups_args&);
  ogon_ListReaderGroups_args() : hContext(0), pcchGroups(0) {
  }

  virtual ~ogon_ListReaderGroups_args() noexcept;
  SCARDCONTEXT_RPC hContext;
  DWORD_RPC pcchGroups;

  _ogon_ListReaderGroups_args__isset __isset;

  void __set_hContext(const SCARDCONTEXT_RPC val);

  void __set_pcchGroups(const DWORD_RPC val);

  bool operator == (const ogon_ListReaderGroups_args & rhs) const
  {
    if (!(hContext == rhs.hContext))
      return false;
    if (!(pcchGroups == rhs.pcchGroups))
      return false;
    return true;
  }
  bool operator != (const ogon_ListReaderGroups_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_ListReaderGroups_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ogon_ListReaderGroups_pargs {
 public:


  virtual ~ogon_ListReaderGroups_pargs() noexcept;
  const SCARDCONTEXT_RPC* hContext;
  const DWORD_RPC* pcchGroups;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_ListReaderGroups_result__isset {
  _ogon_ListReaderGroups_result__isset() : success(false) {}
  bool success :1;
} _ogon_ListReaderGroups_result__isset;

class ogon_ListReaderGroups_result {
 public:

  ogon_ListReaderGroups_result(const ogon_ListReaderGroups_result&);
  ogon_ListReaderGroups_result& operator=(const ogon_ListReaderGroups_result&);
  ogon_ListReaderGroups_result() {
  }

  virtual ~ogon_ListReaderGroups_result() noexcept;
  return_lrg success;

  _ogon_ListReaderGroups_result__isset __isset;

  void __set_success(const return_lrg& val);

  bool operator == (const ogon_ListReaderGroups_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ogon_ListReaderGroups_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_ListReaderGroups_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_ListReaderGroups_presult__isset {
  _ogon_ListReaderGroups_presult__isset() : success(false) {}
  bool success :1;
} _ogon_ListReaderGroups_presult__isset;

class ogon_ListReaderGroups_presult {
 public:


  virtual ~ogon_ListReaderGroups_presult() noexcept;
  return_lrg* success;

  _ogon_ListReaderGroups_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ogon_Connect_args__isset {
  _ogon_Connect_args__isset() : hContext(false), szReader(false), dwShareMode(false), dwPreferredProtocols(false) {}
  bool hContext :1;
  bool szReader :1;
  bool dwShareMode :1;
  bool dwPreferredProtocols :1;
} _ogon_Connect_args__isset;

class ogon_Connect_args {
 public:

  ogon_Connect_args(const ogon_Connect_args&);
  ogon_Connect_args& operator=(const ogon_Connect_args&);
  ogon_Connect_args() : hContext(0), szReader(), dwShareMode(0), dwPreferredProtocols(0) {
  }

  virtual ~ogon_Connect_args() noexcept;
  SCARDCONTEXT_RPC hContext;
  LPCSTR_RPC szReader;
  DWORD_RPC dwShareMode;
  DWORD_RPC dwPreferredProtocols;

  _ogon_Connect_args__isset __isset;

  void __set_hContext(const SCARDCONTEXT_RPC val);

  void __set_szReader(const LPCSTR_RPC& val);

  void __set_dwShareMode(const DWORD_RPC val);

  void __set_dwPreferredProtocols(const DWORD_RPC val);

  bool operator == (const ogon_Connect_args & rhs) const
  {
    if (!(hContext == rhs.hContext))
      return false;
    if (!(szReader == rhs.szReader))
      return false;
    if (!(dwShareMode == rhs.dwShareMode))
      return false;
    if (!(dwPreferredProtocols == rhs.dwPreferredProtocols))
      return false;
    return true;
  }
  bool operator != (const ogon_Connect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_Connect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ogon_Connect_pargs {
 public:


  virtual ~ogon_Connect_pargs() noexcept;
  const SCARDCONTEXT_RPC* hContext;
  const LPCSTR_RPC* szReader;
  const DWORD_RPC* dwShareMode;
  const DWORD_RPC* dwPreferredProtocols;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_Connect_result__isset {
  _ogon_Connect_result__isset() : success(false) {}
  bool success :1;
} _ogon_Connect_result__isset;

class ogon_Connect_result {
 public:

  ogon_Connect_result(const ogon_Connect_result&);
  ogon_Connect_result& operator=(const ogon_Connect_result&);
  ogon_Connect_result() {
  }

  virtual ~ogon_Connect_result() noexcept;
  return_c success;

  _ogon_Connect_result__isset __isset;

  void __set_success(const return_c& val);

  bool operator == (const ogon_Connect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ogon_Connect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_Connect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_Connect_presult__isset {
  _ogon_Connect_presult__isset() : success(false) {}
  bool success :1;
} _ogon_Connect_presult__isset;

class ogon_Connect_presult {
 public:


  virtual ~ogon_Connect_presult() noexcept;
  return_c* success;

  _ogon_Connect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ogon_Reconnect_args__isset {
  _ogon_Reconnect_args__isset() : hCard(false), dwShareMode(false), dwPreferredProtocols(false), dwInitialization(false) {}
  bool hCard :1;
  bool dwShareMode :1;
  bool dwPreferredProtocols :1;
  bool dwInitialization :1;
} _ogon_Reconnect_args__isset;

class ogon_Reconnect_args {
 public:

  ogon_Reconnect_args(const ogon_Reconnect_args&);
  ogon_Reconnect_args& operator=(const ogon_Reconnect_args&);
  ogon_Reconnect_args() : hCard(0), dwShareMode(0), dwPreferredProtocols(0), dwInitialization(0) {
  }

  virtual ~ogon_Reconnect_args() noexcept;
  SCARDHANDLE_RPC hCard;
  DWORD_RPC dwShareMode;
  DWORD_RPC dwPreferredProtocols;
  DWORD_RPC dwInitialization;

  _ogon_Reconnect_args__isset __isset;

  void __set_hCard(const SCARDHANDLE_RPC val);

  void __set_dwShareMode(const DWORD_RPC val);

  void __set_dwPreferredProtocols(const DWORD_RPC val);

  void __set_dwInitialization(const DWORD_RPC val);

  bool operator == (const ogon_Reconnect_args & rhs) const
  {
    if (!(hCard == rhs.hCard))
      return false;
    if (!(dwShareMode == rhs.dwShareMode))
      return false;
    if (!(dwPreferredProtocols == rhs.dwPreferredProtocols))
      return false;
    if (!(dwInitialization == rhs.dwInitialization))
      return false;
    return true;
  }
  bool operator != (const ogon_Reconnect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_Reconnect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ogon_Reconnect_pargs {
 public:


  virtual ~ogon_Reconnect_pargs() noexcept;
  const SCARDHANDLE_RPC* hCard;
  const DWORD_RPC* dwShareMode;
  const DWORD_RPC* dwPreferredProtocols;
  const DWORD_RPC* dwInitialization;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_Reconnect_result__isset {
  _ogon_Reconnect_result__isset() : success(false) {}
  bool success :1;
} _ogon_Reconnect_result__isset;

class ogon_Reconnect_result {
 public:

  ogon_Reconnect_result(const ogon_Reconnect_result&);
  ogon_Reconnect_result& operator=(const ogon_Reconnect_result&);
  ogon_Reconnect_result() {
  }

  virtual ~ogon_Reconnect_result() noexcept;
  return_r success;

  _ogon_Reconnect_result__isset __isset;

  void __set_success(const return_r& val);

  bool operator == (const ogon_Reconnect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ogon_Reconnect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_Reconnect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_Reconnect_presult__isset {
  _ogon_Reconnect_presult__isset() : success(false) {}
  bool success :1;
} _ogon_Reconnect_presult__isset;

class ogon_Reconnect_presult {
 public:


  virtual ~ogon_Reconnect_presult() noexcept;
  return_r* success;

  _ogon_Reconnect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ogon_Disconnect_args__isset {
  _ogon_Disconnect_args__isset() : hCard(false), dwDisposition(false) {}
  bool hCard :1;
  bool dwDisposition :1;
} _ogon_Disconnect_args__isset;

class ogon_Disconnect_args {
 public:

  ogon_Disconnect_args(const ogon_Disconnect_args&);
  ogon_Disconnect_args& operator=(const ogon_Disconnect_args&);
  ogon_Disconnect_args() : hCard(0), dwDisposition(0) {
  }

  virtual ~ogon_Disconnect_args() noexcept;
  SCARDHANDLE_RPC hCard;
  DWORD_RPC dwDisposition;

  _ogon_Disconnect_args__isset __isset;

  void __set_hCard(const SCARDHANDLE_RPC val);

  void __set_dwDisposition(const DWORD_RPC val);

  bool operator == (const ogon_Disconnect_args & rhs) const
  {
    if (!(hCard == rhs.hCard))
      return false;
    if (!(dwDisposition == rhs.dwDisposition))
      return false;
    return true;
  }
  bool operator != (const ogon_Disconnect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_Disconnect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ogon_Disconnect_pargs {
 public:


  virtual ~ogon_Disconnect_pargs() noexcept;
  const SCARDHANDLE_RPC* hCard;
  const DWORD_RPC* dwDisposition;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_Disconnect_result__isset {
  _ogon_Disconnect_result__isset() : success(false) {}
  bool success :1;
} _ogon_Disconnect_result__isset;

class ogon_Disconnect_result {
 public:

  ogon_Disconnect_result(const ogon_Disconnect_result&);
  ogon_Disconnect_result& operator=(const ogon_Disconnect_result&);
  ogon_Disconnect_result() : success(0) {
  }

  virtual ~ogon_Disconnect_result() noexcept;
  LONG_RPC success;

  _ogon_Disconnect_result__isset __isset;

  void __set_success(const LONG_RPC val);

  bool operator == (const ogon_Disconnect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ogon_Disconnect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_Disconnect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_Disconnect_presult__isset {
  _ogon_Disconnect_presult__isset() : success(false) {}
  bool success :1;
} _ogon_Disconnect_presult__isset;

class ogon_Disconnect_presult {
 public:


  virtual ~ogon_Disconnect_presult() noexcept;
  LONG_RPC* success;

  _ogon_Disconnect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ogon_Status_args__isset {
  _ogon_Status_args__isset() : hCard(false), pcchReaderLen(false), pcbAtrLen(false) {}
  bool hCard :1;
  bool pcchReaderLen :1;
  bool pcbAtrLen :1;
} _ogon_Status_args__isset;

class ogon_Status_args {
 public:

  ogon_Status_args(const ogon_Status_args&);
  ogon_Status_args& operator=(const ogon_Status_args&);
  ogon_Status_args() : hCard(0), pcchReaderLen(0), pcbAtrLen(0) {
  }

  virtual ~ogon_Status_args() noexcept;
  SCARDHANDLE_RPC hCard;
  DWORD_RPC pcchReaderLen;
  DWORD_RPC pcbAtrLen;

  _ogon_Status_args__isset __isset;

  void __set_hCard(const SCARDHANDLE_RPC val);

  void __set_pcchReaderLen(const DWORD_RPC val);

  void __set_pcbAtrLen(const DWORD_RPC val);

  bool operator == (const ogon_Status_args & rhs) const
  {
    if (!(hCard == rhs.hCard))
      return false;
    if (!(pcchReaderLen == rhs.pcchReaderLen))
      return false;
    if (!(pcbAtrLen == rhs.pcbAtrLen))
      return false;
    return true;
  }
  bool operator != (const ogon_Status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_Status_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ogon_Status_pargs {
 public:


  virtual ~ogon_Status_pargs() noexcept;
  const SCARDHANDLE_RPC* hCard;
  const DWORD_RPC* pcchReaderLen;
  const DWORD_RPC* pcbAtrLen;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_Status_result__isset {
  _ogon_Status_result__isset() : success(false) {}
  bool success :1;
} _ogon_Status_result__isset;

class ogon_Status_result {
 public:

  ogon_Status_result(const ogon_Status_result&);
  ogon_Status_result& operator=(const ogon_Status_result&);
  ogon_Status_result() {
  }

  virtual ~ogon_Status_result() noexcept;
  return_s success;

  _ogon_Status_result__isset __isset;

  void __set_success(const return_s& val);

  bool operator == (const ogon_Status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ogon_Status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_Status_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_Status_presult__isset {
  _ogon_Status_presult__isset() : success(false) {}
  bool success :1;
} _ogon_Status_presult__isset;

class ogon_Status_presult {
 public:


  virtual ~ogon_Status_presult() noexcept;
  return_s* success;

  _ogon_Status_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ogon_GetStatusChange_args__isset {
  _ogon_GetStatusChange_args__isset() : hContext(false), dwTimeout(false), rgReaderStates(false), cReaders(false) {}
  bool hContext :1;
  bool dwTimeout :1;
  bool rgReaderStates :1;
  bool cReaders :1;
} _ogon_GetStatusChange_args__isset;

class ogon_GetStatusChange_args {
 public:

  ogon_GetStatusChange_args(const ogon_GetStatusChange_args&);
  ogon_GetStatusChange_args& operator=(const ogon_GetStatusChange_args&);
  ogon_GetStatusChange_args() : hContext(0), dwTimeout(0), cReaders(0) {
  }

  virtual ~ogon_GetStatusChange_args() noexcept;
  SCARDCONTEXT_RPC hContext;
  DWORD_RPC dwTimeout;
  std::vector<scard_readerstate_rpc>  rgReaderStates;
  DWORD_RPC cReaders;

  _ogon_GetStatusChange_args__isset __isset;

  void __set_hContext(const SCARDCONTEXT_RPC val);

  void __set_dwTimeout(const DWORD_RPC val);

  void __set_rgReaderStates(const std::vector<scard_readerstate_rpc> & val);

  void __set_cReaders(const DWORD_RPC val);

  bool operator == (const ogon_GetStatusChange_args & rhs) const
  {
    if (!(hContext == rhs.hContext))
      return false;
    if (!(dwTimeout == rhs.dwTimeout))
      return false;
    if (!(rgReaderStates == rhs.rgReaderStates))
      return false;
    if (!(cReaders == rhs.cReaders))
      return false;
    return true;
  }
  bool operator != (const ogon_GetStatusChange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_GetStatusChange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ogon_GetStatusChange_pargs {
 public:


  virtual ~ogon_GetStatusChange_pargs() noexcept;
  const SCARDCONTEXT_RPC* hContext;
  const DWORD_RPC* dwTimeout;
  const std::vector<scard_readerstate_rpc> * rgReaderStates;
  const DWORD_RPC* cReaders;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_GetStatusChange_result__isset {
  _ogon_GetStatusChange_result__isset() : success(false) {}
  bool success :1;
} _ogon_GetStatusChange_result__isset;

class ogon_GetStatusChange_result {
 public:

  ogon_GetStatusChange_result(const ogon_GetStatusChange_result&);
  ogon_GetStatusChange_result& operator=(const ogon_GetStatusChange_result&);
  ogon_GetStatusChange_result() {
  }

  virtual ~ogon_GetStatusChange_result() noexcept;
  return_gsc success;

  _ogon_GetStatusChange_result__isset __isset;

  void __set_success(const return_gsc& val);

  bool operator == (const ogon_GetStatusChange_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ogon_GetStatusChange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_GetStatusChange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_GetStatusChange_presult__isset {
  _ogon_GetStatusChange_presult__isset() : success(false) {}
  bool success :1;
} _ogon_GetStatusChange_presult__isset;

class ogon_GetStatusChange_presult {
 public:


  virtual ~ogon_GetStatusChange_presult() noexcept;
  return_gsc* success;

  _ogon_GetStatusChange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ogon_Transmit_args__isset {
  _ogon_Transmit_args__isset() : hCard(false), pioSendPci(false), pbSendBuffer(false), pcbRecvLength(false) {}
  bool hCard :1;
  bool pioSendPci :1;
  bool pbSendBuffer :1;
  bool pcbRecvLength :1;
} _ogon_Transmit_args__isset;

class ogon_Transmit_args {
 public:

  ogon_Transmit_args(const ogon_Transmit_args&);
  ogon_Transmit_args& operator=(const ogon_Transmit_args&);
  ogon_Transmit_args() : hCard(0), pbSendBuffer(), pcbRecvLength(0) {
  }

  virtual ~ogon_Transmit_args() noexcept;
  SCARDHANDLE_RPC hCard;
  scard_io_request_rpc pioSendPci;
  LPBYTE_RPC pbSendBuffer;
  DWORD_RPC pcbRecvLength;

  _ogon_Transmit_args__isset __isset;

  void __set_hCard(const SCARDHANDLE_RPC val);

  void __set_pioSendPci(const scard_io_request_rpc& val);

  void __set_pbSendBuffer(const LPBYTE_RPC& val);

  void __set_pcbRecvLength(const DWORD_RPC val);

  bool operator == (const ogon_Transmit_args & rhs) const
  {
    if (!(hCard == rhs.hCard))
      return false;
    if (!(pioSendPci == rhs.pioSendPci))
      return false;
    if (!(pbSendBuffer == rhs.pbSendBuffer))
      return false;
    if (!(pcbRecvLength == rhs.pcbRecvLength))
      return false;
    return true;
  }
  bool operator != (const ogon_Transmit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_Transmit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ogon_Transmit_pargs {
 public:


  virtual ~ogon_Transmit_pargs() noexcept;
  const SCARDHANDLE_RPC* hCard;
  const scard_io_request_rpc* pioSendPci;
  const LPBYTE_RPC* pbSendBuffer;
  const DWORD_RPC* pcbRecvLength;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_Transmit_result__isset {
  _ogon_Transmit_result__isset() : success(false) {}
  bool success :1;
} _ogon_Transmit_result__isset;

class ogon_Transmit_result {
 public:

  ogon_Transmit_result(const ogon_Transmit_result&);
  ogon_Transmit_result& operator=(const ogon_Transmit_result&);
  ogon_Transmit_result() {
  }

  virtual ~ogon_Transmit_result() noexcept;
  return_t success;

  _ogon_Transmit_result__isset __isset;

  void __set_success(const return_t& val);

  bool operator == (const ogon_Transmit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ogon_Transmit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_Transmit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_Transmit_presult__isset {
  _ogon_Transmit_presult__isset() : success(false) {}
  bool success :1;
} _ogon_Transmit_presult__isset;

class ogon_Transmit_presult {
 public:


  virtual ~ogon_Transmit_presult() noexcept;
  return_t* success;

  _ogon_Transmit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ogon_BeginTransaction_args__isset {
  _ogon_BeginTransaction_args__isset() : hCard(false) {}
  bool hCard :1;
} _ogon_BeginTransaction_args__isset;

class ogon_BeginTransaction_args {
 public:

  ogon_BeginTransaction_args(const ogon_BeginTransaction_args&);
  ogon_BeginTransaction_args& operator=(const ogon_BeginTransaction_args&);
  ogon_BeginTransaction_args() : hCard(0) {
  }

  virtual ~ogon_BeginTransaction_args() noexcept;
  SCARDHANDLE_RPC hCard;

  _ogon_BeginTransaction_args__isset __isset;

  void __set_hCard(const SCARDHANDLE_RPC val);

  bool operator == (const ogon_BeginTransaction_args & rhs) const
  {
    if (!(hCard == rhs.hCard))
      return false;
    return true;
  }
  bool operator != (const ogon_BeginTransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_BeginTransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ogon_BeginTransaction_pargs {
 public:


  virtual ~ogon_BeginTransaction_pargs() noexcept;
  const SCARDHANDLE_RPC* hCard;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_BeginTransaction_result__isset {
  _ogon_BeginTransaction_result__isset() : success(false) {}
  bool success :1;
} _ogon_BeginTransaction_result__isset;

class ogon_BeginTransaction_result {
 public:

  ogon_BeginTransaction_result(const ogon_BeginTransaction_result&);
  ogon_BeginTransaction_result& operator=(const ogon_BeginTransaction_result&);
  ogon_BeginTransaction_result() : success(0) {
  }

  virtual ~ogon_BeginTransaction_result() noexcept;
  LONG_RPC success;

  _ogon_BeginTransaction_result__isset __isset;

  void __set_success(const LONG_RPC val);

  bool operator == (const ogon_BeginTransaction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ogon_BeginTransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_BeginTransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_BeginTransaction_presult__isset {
  _ogon_BeginTransaction_presult__isset() : success(false) {}
  bool success :1;
} _ogon_BeginTransaction_presult__isset;

class ogon_BeginTransaction_presult {
 public:


  virtual ~ogon_BeginTransaction_presult() noexcept;
  LONG_RPC* success;

  _ogon_BeginTransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ogon_EndTransaction_args__isset {
  _ogon_EndTransaction_args__isset() : hCard(false), dwDisposition(false) {}
  bool hCard :1;
  bool dwDisposition :1;
} _ogon_EndTransaction_args__isset;

class ogon_EndTransaction_args {
 public:

  ogon_EndTransaction_args(const ogon_EndTransaction_args&);
  ogon_EndTransaction_args& operator=(const ogon_EndTransaction_args&);
  ogon_EndTransaction_args() : hCard(0), dwDisposition(0) {
  }

  virtual ~ogon_EndTransaction_args() noexcept;
  SCARDHANDLE_RPC hCard;
  DWORD_RPC dwDisposition;

  _ogon_EndTransaction_args__isset __isset;

  void __set_hCard(const SCARDHANDLE_RPC val);

  void __set_dwDisposition(const DWORD_RPC val);

  bool operator == (const ogon_EndTransaction_args & rhs) const
  {
    if (!(hCard == rhs.hCard))
      return false;
    if (!(dwDisposition == rhs.dwDisposition))
      return false;
    return true;
  }
  bool operator != (const ogon_EndTransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_EndTransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ogon_EndTransaction_pargs {
 public:


  virtual ~ogon_EndTransaction_pargs() noexcept;
  const SCARDHANDLE_RPC* hCard;
  const DWORD_RPC* dwDisposition;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_EndTransaction_result__isset {
  _ogon_EndTransaction_result__isset() : success(false) {}
  bool success :1;
} _ogon_EndTransaction_result__isset;

class ogon_EndTransaction_result {
 public:

  ogon_EndTransaction_result(const ogon_EndTransaction_result&);
  ogon_EndTransaction_result& operator=(const ogon_EndTransaction_result&);
  ogon_EndTransaction_result() : success(0) {
  }

  virtual ~ogon_EndTransaction_result() noexcept;
  LONG_RPC success;

  _ogon_EndTransaction_result__isset __isset;

  void __set_success(const LONG_RPC val);

  bool operator == (const ogon_EndTransaction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ogon_EndTransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_EndTransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_EndTransaction_presult__isset {
  _ogon_EndTransaction_presult__isset() : success(false) {}
  bool success :1;
} _ogon_EndTransaction_presult__isset;

class ogon_EndTransaction_presult {
 public:


  virtual ~ogon_EndTransaction_presult() noexcept;
  LONG_RPC* success;

  _ogon_EndTransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ogon_GetAttrib_args__isset {
  _ogon_GetAttrib_args__isset() : hCard(false), dwAttrId(false), pcbAttrLen(false) {}
  bool hCard :1;
  bool dwAttrId :1;
  bool pcbAttrLen :1;
} _ogon_GetAttrib_args__isset;

class ogon_GetAttrib_args {
 public:

  ogon_GetAttrib_args(const ogon_GetAttrib_args&);
  ogon_GetAttrib_args& operator=(const ogon_GetAttrib_args&);
  ogon_GetAttrib_args() : hCard(0), dwAttrId(0), pcbAttrLen(0) {
  }

  virtual ~ogon_GetAttrib_args() noexcept;
  SCARDHANDLE_RPC hCard;
  DWORD_RPC dwAttrId;
  DWORD_RPC pcbAttrLen;

  _ogon_GetAttrib_args__isset __isset;

  void __set_hCard(const SCARDHANDLE_RPC val);

  void __set_dwAttrId(const DWORD_RPC val);

  void __set_pcbAttrLen(const DWORD_RPC val);

  bool operator == (const ogon_GetAttrib_args & rhs) const
  {
    if (!(hCard == rhs.hCard))
      return false;
    if (!(dwAttrId == rhs.dwAttrId))
      return false;
    if (!(pcbAttrLen == rhs.pcbAttrLen))
      return false;
    return true;
  }
  bool operator != (const ogon_GetAttrib_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_GetAttrib_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ogon_GetAttrib_pargs {
 public:


  virtual ~ogon_GetAttrib_pargs() noexcept;
  const SCARDHANDLE_RPC* hCard;
  const DWORD_RPC* dwAttrId;
  const DWORD_RPC* pcbAttrLen;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_GetAttrib_result__isset {
  _ogon_GetAttrib_result__isset() : success(false) {}
  bool success :1;
} _ogon_GetAttrib_result__isset;

class ogon_GetAttrib_result {
 public:

  ogon_GetAttrib_result(const ogon_GetAttrib_result&);
  ogon_GetAttrib_result& operator=(const ogon_GetAttrib_result&);
  ogon_GetAttrib_result() {
  }

  virtual ~ogon_GetAttrib_result() noexcept;
  return_ga success;

  _ogon_GetAttrib_result__isset __isset;

  void __set_success(const return_ga& val);

  bool operator == (const ogon_GetAttrib_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ogon_GetAttrib_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_GetAttrib_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_GetAttrib_presult__isset {
  _ogon_GetAttrib_presult__isset() : success(false) {}
  bool success :1;
} _ogon_GetAttrib_presult__isset;

class ogon_GetAttrib_presult {
 public:


  virtual ~ogon_GetAttrib_presult() noexcept;
  return_ga* success;

  _ogon_GetAttrib_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ogon_Control_args__isset {
  _ogon_Control_args__isset() : hCard(false), dwControlCode(false), pbSendBuffer(false), cbRecvLength(false) {}
  bool hCard :1;
  bool dwControlCode :1;
  bool pbSendBuffer :1;
  bool cbRecvLength :1;
} _ogon_Control_args__isset;

class ogon_Control_args {
 public:

  ogon_Control_args(const ogon_Control_args&);
  ogon_Control_args& operator=(const ogon_Control_args&);
  ogon_Control_args() : hCard(0), dwControlCode(0), pbSendBuffer(), cbRecvLength(0) {
  }

  virtual ~ogon_Control_args() noexcept;
  SCARDHANDLE_RPC hCard;
  DWORD_RPC dwControlCode;
  LPVOID_RPC pbSendBuffer;
  DWORD_RPC cbRecvLength;

  _ogon_Control_args__isset __isset;

  void __set_hCard(const SCARDHANDLE_RPC val);

  void __set_dwControlCode(const DWORD_RPC val);

  void __set_pbSendBuffer(const LPVOID_RPC& val);

  void __set_cbRecvLength(const DWORD_RPC val);

  bool operator == (const ogon_Control_args & rhs) const
  {
    if (!(hCard == rhs.hCard))
      return false;
    if (!(dwControlCode == rhs.dwControlCode))
      return false;
    if (!(pbSendBuffer == rhs.pbSendBuffer))
      return false;
    if (!(cbRecvLength == rhs.cbRecvLength))
      return false;
    return true;
  }
  bool operator != (const ogon_Control_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_Control_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ogon_Control_pargs {
 public:


  virtual ~ogon_Control_pargs() noexcept;
  const SCARDHANDLE_RPC* hCard;
  const DWORD_RPC* dwControlCode;
  const LPVOID_RPC* pbSendBuffer;
  const DWORD_RPC* cbRecvLength;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_Control_result__isset {
  _ogon_Control_result__isset() : success(false) {}
  bool success :1;
} _ogon_Control_result__isset;

class ogon_Control_result {
 public:

  ogon_Control_result(const ogon_Control_result&);
  ogon_Control_result& operator=(const ogon_Control_result&);
  ogon_Control_result() {
  }

  virtual ~ogon_Control_result() noexcept;
  return_ctrl success;

  _ogon_Control_result__isset __isset;

  void __set_success(const return_ctrl& val);

  bool operator == (const ogon_Control_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ogon_Control_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_Control_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_Control_presult__isset {
  _ogon_Control_presult__isset() : success(false) {}
  bool success :1;
} _ogon_Control_presult__isset;

class ogon_Control_presult {
 public:


  virtual ~ogon_Control_presult() noexcept;
  return_ctrl* success;

  _ogon_Control_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ogon_Cancel_args__isset {
  _ogon_Cancel_args__isset() : hContext(false) {}
  bool hContext :1;
} _ogon_Cancel_args__isset;

class ogon_Cancel_args {
 public:

  ogon_Cancel_args(const ogon_Cancel_args&);
  ogon_Cancel_args& operator=(const ogon_Cancel_args&);
  ogon_Cancel_args() : hContext(0) {
  }

  virtual ~ogon_Cancel_args() noexcept;
  SCARDCONTEXT_RPC hContext;

  _ogon_Cancel_args__isset __isset;

  void __set_hContext(const SCARDCONTEXT_RPC val);

  bool operator == (const ogon_Cancel_args & rhs) const
  {
    if (!(hContext == rhs.hContext))
      return false;
    return true;
  }
  bool operator != (const ogon_Cancel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_Cancel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ogon_Cancel_pargs {
 public:


  virtual ~ogon_Cancel_pargs() noexcept;
  const SCARDCONTEXT_RPC* hContext;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_Cancel_result__isset {
  _ogon_Cancel_result__isset() : success(false) {}
  bool success :1;
} _ogon_Cancel_result__isset;

class ogon_Cancel_result {
 public:

  ogon_Cancel_result(const ogon_Cancel_result&);
  ogon_Cancel_result& operator=(const ogon_Cancel_result&);
  ogon_Cancel_result() : success(0) {
  }

  virtual ~ogon_Cancel_result() noexcept;
  LONG_RPC success;

  _ogon_Cancel_result__isset __isset;

  void __set_success(const LONG_RPC val);

  bool operator == (const ogon_Cancel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ogon_Cancel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_Cancel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_Cancel_presult__isset {
  _ogon_Cancel_presult__isset() : success(false) {}
  bool success :1;
} _ogon_Cancel_presult__isset;

class ogon_Cancel_presult {
 public:


  virtual ~ogon_Cancel_presult() noexcept;
  LONG_RPC* success;

  _ogon_Cancel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ogon_IsValidContext_args__isset {
  _ogon_IsValidContext_args__isset() : hContext(false) {}
  bool hContext :1;
} _ogon_IsValidContext_args__isset;

class ogon_IsValidContext_args {
 public:

  ogon_IsValidContext_args(const ogon_IsValidContext_args&);
  ogon_IsValidContext_args& operator=(const ogon_IsValidContext_args&);
  ogon_IsValidContext_args() : hContext(0) {
  }

  virtual ~ogon_IsValidContext_args() noexcept;
  SCARDCONTEXT_RPC hContext;

  _ogon_IsValidContext_args__isset __isset;

  void __set_hContext(const SCARDCONTEXT_RPC val);

  bool operator == (const ogon_IsValidContext_args & rhs) const
  {
    if (!(hContext == rhs.hContext))
      return false;
    return true;
  }
  bool operator != (const ogon_IsValidContext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_IsValidContext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ogon_IsValidContext_pargs {
 public:


  virtual ~ogon_IsValidContext_pargs() noexcept;
  const SCARDCONTEXT_RPC* hContext;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_IsValidContext_result__isset {
  _ogon_IsValidContext_result__isset() : success(false) {}
  bool success :1;
} _ogon_IsValidContext_result__isset;

class ogon_IsValidContext_result {
 public:

  ogon_IsValidContext_result(const ogon_IsValidContext_result&);
  ogon_IsValidContext_result& operator=(const ogon_IsValidContext_result&);
  ogon_IsValidContext_result() : success(0) {
  }

  virtual ~ogon_IsValidContext_result() noexcept;
  LONG_RPC success;

  _ogon_IsValidContext_result__isset __isset;

  void __set_success(const LONG_RPC val);

  bool operator == (const ogon_IsValidContext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ogon_IsValidContext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ogon_IsValidContext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ogon_IsValidContext_presult__isset {
  _ogon_IsValidContext_presult__isset() : success(false) {}
  bool success :1;
} _ogon_IsValidContext_presult__isset;

class ogon_IsValidContext_presult {
 public:


  virtual ~ogon_IsValidContext_presult() noexcept;
  LONG_RPC* success;

  _ogon_IsValidContext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ogonClient : virtual public ogonIf {
 public:
  ogonClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ogonClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void EstablishContext(return_ec& _return, const DWORD_RPC dwScope);
  void send_EstablishContext(const DWORD_RPC dwScope);
  void recv_EstablishContext(return_ec& _return);
  LONG_RPC ReleaseContext(const SCARDCONTEXT_RPC hContext);
  void send_ReleaseContext(const SCARDCONTEXT_RPC hContext);
  LONG_RPC recv_ReleaseContext();
  void ListReaders(return_lr& _return, const SCARDCONTEXT_RPC hContext, const DWORD_RPC pcchReaders);
  void send_ListReaders(const SCARDCONTEXT_RPC hContext, const DWORD_RPC pcchReaders);
  void recv_ListReaders(return_lr& _return);
  void ListReaderGroups(return_lrg& _return, const SCARDCONTEXT_RPC hContext, const DWORD_RPC pcchGroups);
  void send_ListReaderGroups(const SCARDCONTEXT_RPC hContext, const DWORD_RPC pcchGroups);
  void recv_ListReaderGroups(return_lrg& _return);
  void Connect(return_c& _return, const SCARDCONTEXT_RPC hContext, const LPCSTR_RPC& szReader, const DWORD_RPC dwShareMode, const DWORD_RPC dwPreferredProtocols);
  void send_Connect(const SCARDCONTEXT_RPC hContext, const LPCSTR_RPC& szReader, const DWORD_RPC dwShareMode, const DWORD_RPC dwPreferredProtocols);
  void recv_Connect(return_c& _return);
  void Reconnect(return_r& _return, const SCARDHANDLE_RPC hCard, const DWORD_RPC dwShareMode, const DWORD_RPC dwPreferredProtocols, const DWORD_RPC dwInitialization);
  void send_Reconnect(const SCARDHANDLE_RPC hCard, const DWORD_RPC dwShareMode, const DWORD_RPC dwPreferredProtocols, const DWORD_RPC dwInitialization);
  void recv_Reconnect(return_r& _return);
  LONG_RPC Disconnect(const SCARDHANDLE_RPC hCard, const DWORD_RPC dwDisposition);
  void send_Disconnect(const SCARDHANDLE_RPC hCard, const DWORD_RPC dwDisposition);
  LONG_RPC recv_Disconnect();
  void Status(return_s& _return, const SCARDHANDLE_RPC hCard, const DWORD_RPC pcchReaderLen, const DWORD_RPC pcbAtrLen);
  void send_Status(const SCARDHANDLE_RPC hCard, const DWORD_RPC pcchReaderLen, const DWORD_RPC pcbAtrLen);
  void recv_Status(return_s& _return);
  void GetStatusChange(return_gsc& _return, const SCARDCONTEXT_RPC hContext, const DWORD_RPC dwTimeout, const std::vector<scard_readerstate_rpc> & rgReaderStates, const DWORD_RPC cReaders);
  void send_GetStatusChange(const SCARDCONTEXT_RPC hContext, const DWORD_RPC dwTimeout, const std::vector<scard_readerstate_rpc> & rgReaderStates, const DWORD_RPC cReaders);
  void recv_GetStatusChange(return_gsc& _return);
  void Transmit(return_t& _return, const SCARDHANDLE_RPC hCard, const scard_io_request_rpc& pioSendPci, const LPBYTE_RPC& pbSendBuffer, const DWORD_RPC pcbRecvLength);
  void send_Transmit(const SCARDHANDLE_RPC hCard, const scard_io_request_rpc& pioSendPci, const LPBYTE_RPC& pbSendBuffer, const DWORD_RPC pcbRecvLength);
  void recv_Transmit(return_t& _return);
  LONG_RPC BeginTransaction(const SCARDHANDLE_RPC hCard);
  void send_BeginTransaction(const SCARDHANDLE_RPC hCard);
  LONG_RPC recv_BeginTransaction();
  LONG_RPC EndTransaction(const SCARDHANDLE_RPC hCard, const DWORD_RPC dwDisposition);
  void send_EndTransaction(const SCARDHANDLE_RPC hCard, const DWORD_RPC dwDisposition);
  LONG_RPC recv_EndTransaction();
  void GetAttrib(return_ga& _return, const SCARDHANDLE_RPC hCard, const DWORD_RPC dwAttrId, const DWORD_RPC pcbAttrLen);
  void send_GetAttrib(const SCARDHANDLE_RPC hCard, const DWORD_RPC dwAttrId, const DWORD_RPC pcbAttrLen);
  void recv_GetAttrib(return_ga& _return);
  void Control(return_ctrl& _return, const SCARDHANDLE_RPC hCard, const DWORD_RPC dwControlCode, const LPVOID_RPC& pbSendBuffer, const DWORD_RPC cbRecvLength);
  void send_Control(const SCARDHANDLE_RPC hCard, const DWORD_RPC dwControlCode, const LPVOID_RPC& pbSendBuffer, const DWORD_RPC cbRecvLength);
  void recv_Control(return_ctrl& _return);
  LONG_RPC Cancel(const SCARDCONTEXT_RPC hContext);
  void send_Cancel(const SCARDCONTEXT_RPC hContext);
  LONG_RPC recv_Cancel();
  LONG_RPC IsValidContext(const SCARDCONTEXT_RPC hContext);
  void send_IsValidContext(const SCARDCONTEXT_RPC hContext);
  LONG_RPC recv_IsValidContext();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ogonProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ogonIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ogonProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_EstablishContext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReleaseContext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ListReaders(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ListReaderGroups(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Connect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Reconnect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Disconnect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Status(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetStatusChange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Transmit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_BeginTransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EndTransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAttrib(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Control(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Cancel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_IsValidContext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ogonProcessor(::std::shared_ptr<ogonIf> iface) :
    iface_(iface) {
    processMap_["EstablishContext"] = &ogonProcessor::process_EstablishContext;
    processMap_["ReleaseContext"] = &ogonProcessor::process_ReleaseContext;
    processMap_["ListReaders"] = &ogonProcessor::process_ListReaders;
    processMap_["ListReaderGroups"] = &ogonProcessor::process_ListReaderGroups;
    processMap_["Connect"] = &ogonProcessor::process_Connect;
    processMap_["Reconnect"] = &ogonProcessor::process_Reconnect;
    processMap_["Disconnect"] = &ogonProcessor::process_Disconnect;
    processMap_["Status"] = &ogonProcessor::process_Status;
    processMap_["GetStatusChange"] = &ogonProcessor::process_GetStatusChange;
    processMap_["Transmit"] = &ogonProcessor::process_Transmit;
    processMap_["BeginTransaction"] = &ogonProcessor::process_BeginTransaction;
    processMap_["EndTransaction"] = &ogonProcessor::process_EndTransaction;
    processMap_["GetAttrib"] = &ogonProcessor::process_GetAttrib;
    processMap_["Control"] = &ogonProcessor::process_Control;
    processMap_["Cancel"] = &ogonProcessor::process_Cancel;
    processMap_["IsValidContext"] = &ogonProcessor::process_IsValidContext;
  }

  virtual ~ogonProcessor() {}
};

class ogonProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ogonProcessorFactory(const ::std::shared_ptr< ogonIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< ogonIfFactory > handlerFactory_;
};

class ogonMultiface : virtual public ogonIf {
 public:
  ogonMultiface(std::vector<std::shared_ptr<ogonIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ogonMultiface() {}
 protected:
  std::vector<std::shared_ptr<ogonIf> > ifaces_;
  ogonMultiface() {}
  void add(::std::shared_ptr<ogonIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void EstablishContext(return_ec& _return, const DWORD_RPC dwScope) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EstablishContext(_return, dwScope);
    }
    ifaces_[i]->EstablishContext(_return, dwScope);
    return;
  }

  LONG_RPC ReleaseContext(const SCARDCONTEXT_RPC hContext) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReleaseContext(hContext);
    }
    return ifaces_[i]->ReleaseContext(hContext);
  }

  void ListReaders(return_lr& _return, const SCARDCONTEXT_RPC hContext, const DWORD_RPC pcchReaders) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ListReaders(_return, hContext, pcchReaders);
    }
    ifaces_[i]->ListReaders(_return, hContext, pcchReaders);
    return;
  }

  void ListReaderGroups(return_lrg& _return, const SCARDCONTEXT_RPC hContext, const DWORD_RPC pcchGroups) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ListReaderGroups(_return, hContext, pcchGroups);
    }
    ifaces_[i]->ListReaderGroups(_return, hContext, pcchGroups);
    return;
  }

  void Connect(return_c& _return, const SCARDCONTEXT_RPC hContext, const LPCSTR_RPC& szReader, const DWORD_RPC dwShareMode, const DWORD_RPC dwPreferredProtocols) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Connect(_return, hContext, szReader, dwShareMode, dwPreferredProtocols);
    }
    ifaces_[i]->Connect(_return, hContext, szReader, dwShareMode, dwPreferredProtocols);
    return;
  }

  void Reconnect(return_r& _return, const SCARDHANDLE_RPC hCard, const DWORD_RPC dwShareMode, const DWORD_RPC dwPreferredProtocols, const DWORD_RPC dwInitialization) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Reconnect(_return, hCard, dwShareMode, dwPreferredProtocols, dwInitialization);
    }
    ifaces_[i]->Reconnect(_return, hCard, dwShareMode, dwPreferredProtocols, dwInitialization);
    return;
  }

  LONG_RPC Disconnect(const SCARDHANDLE_RPC hCard, const DWORD_RPC dwDisposition) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Disconnect(hCard, dwDisposition);
    }
    return ifaces_[i]->Disconnect(hCard, dwDisposition);
  }

  void Status(return_s& _return, const SCARDHANDLE_RPC hCard, const DWORD_RPC pcchReaderLen, const DWORD_RPC pcbAtrLen) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Status(_return, hCard, pcchReaderLen, pcbAtrLen);
    }
    ifaces_[i]->Status(_return, hCard, pcchReaderLen, pcbAtrLen);
    return;
  }

  void GetStatusChange(return_gsc& _return, const SCARDCONTEXT_RPC hContext, const DWORD_RPC dwTimeout, const std::vector<scard_readerstate_rpc> & rgReaderStates, const DWORD_RPC cReaders) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetStatusChange(_return, hContext, dwTimeout, rgReaderStates, cReaders);
    }
    ifaces_[i]->GetStatusChange(_return, hContext, dwTimeout, rgReaderStates, cReaders);
    return;
  }

  void Transmit(return_t& _return, const SCARDHANDLE_RPC hCard, const scard_io_request_rpc& pioSendPci, const LPBYTE_RPC& pbSendBuffer, const DWORD_RPC pcbRecvLength) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Transmit(_return, hCard, pioSendPci, pbSendBuffer, pcbRecvLength);
    }
    ifaces_[i]->Transmit(_return, hCard, pioSendPci, pbSendBuffer, pcbRecvLength);
    return;
  }

  LONG_RPC BeginTransaction(const SCARDHANDLE_RPC hCard) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->BeginTransaction(hCard);
    }
    return ifaces_[i]->BeginTransaction(hCard);
  }

  LONG_RPC EndTransaction(const SCARDHANDLE_RPC hCard, const DWORD_RPC dwDisposition) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EndTransaction(hCard, dwDisposition);
    }
    return ifaces_[i]->EndTransaction(hCard, dwDisposition);
  }

  void GetAttrib(return_ga& _return, const SCARDHANDLE_RPC hCard, const DWORD_RPC dwAttrId, const DWORD_RPC pcbAttrLen) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAttrib(_return, hCard, dwAttrId, pcbAttrLen);
    }
    ifaces_[i]->GetAttrib(_return, hCard, dwAttrId, pcbAttrLen);
    return;
  }

  void Control(return_ctrl& _return, const SCARDHANDLE_RPC hCard, const DWORD_RPC dwControlCode, const LPVOID_RPC& pbSendBuffer, const DWORD_RPC cbRecvLength) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Control(_return, hCard, dwControlCode, pbSendBuffer, cbRecvLength);
    }
    ifaces_[i]->Control(_return, hCard, dwControlCode, pbSendBuffer, cbRecvLength);
    return;
  }

  LONG_RPC Cancel(const SCARDCONTEXT_RPC hContext) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Cancel(hContext);
    }
    return ifaces_[i]->Cancel(hContext);
  }

  LONG_RPC IsValidContext(const SCARDCONTEXT_RPC hContext) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->IsValidContext(hContext);
    }
    return ifaces_[i]->IsValidContext(hContext);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ogonConcurrentClient : virtual public ogonIf {
 public:
  ogonConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ogonConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void EstablishContext(return_ec& _return, const DWORD_RPC dwScope);
  int32_t send_EstablishContext(const DWORD_RPC dwScope);
  void recv_EstablishContext(return_ec& _return, const int32_t seqid);
  LONG_RPC ReleaseContext(const SCARDCONTEXT_RPC hContext);
  int32_t send_ReleaseContext(const SCARDCONTEXT_RPC hContext);
  LONG_RPC recv_ReleaseContext(const int32_t seqid);
  void ListReaders(return_lr& _return, const SCARDCONTEXT_RPC hContext, const DWORD_RPC pcchReaders);
  int32_t send_ListReaders(const SCARDCONTEXT_RPC hContext, const DWORD_RPC pcchReaders);
  void recv_ListReaders(return_lr& _return, const int32_t seqid);
  void ListReaderGroups(return_lrg& _return, const SCARDCONTEXT_RPC hContext, const DWORD_RPC pcchGroups);
  int32_t send_ListReaderGroups(const SCARDCONTEXT_RPC hContext, const DWORD_RPC pcchGroups);
  void recv_ListReaderGroups(return_lrg& _return, const int32_t seqid);
  void Connect(return_c& _return, const SCARDCONTEXT_RPC hContext, const LPCSTR_RPC& szReader, const DWORD_RPC dwShareMode, const DWORD_RPC dwPreferredProtocols);
  int32_t send_Connect(const SCARDCONTEXT_RPC hContext, const LPCSTR_RPC& szReader, const DWORD_RPC dwShareMode, const DWORD_RPC dwPreferredProtocols);
  void recv_Connect(return_c& _return, const int32_t seqid);
  void Reconnect(return_r& _return, const SCARDHANDLE_RPC hCard, const DWORD_RPC dwShareMode, const DWORD_RPC dwPreferredProtocols, const DWORD_RPC dwInitialization);
  int32_t send_Reconnect(const SCARDHANDLE_RPC hCard, const DWORD_RPC dwShareMode, const DWORD_RPC dwPreferredProtocols, const DWORD_RPC dwInitialization);
  void recv_Reconnect(return_r& _return, const int32_t seqid);
  LONG_RPC Disconnect(const SCARDHANDLE_RPC hCard, const DWORD_RPC dwDisposition);
  int32_t send_Disconnect(const SCARDHANDLE_RPC hCard, const DWORD_RPC dwDisposition);
  LONG_RPC recv_Disconnect(const int32_t seqid);
  void Status(return_s& _return, const SCARDHANDLE_RPC hCard, const DWORD_RPC pcchReaderLen, const DWORD_RPC pcbAtrLen);
  int32_t send_Status(const SCARDHANDLE_RPC hCard, const DWORD_RPC pcchReaderLen, const DWORD_RPC pcbAtrLen);
  void recv_Status(return_s& _return, const int32_t seqid);
  void GetStatusChange(return_gsc& _return, const SCARDCONTEXT_RPC hContext, const DWORD_RPC dwTimeout, const std::vector<scard_readerstate_rpc> & rgReaderStates, const DWORD_RPC cReaders);
  int32_t send_GetStatusChange(const SCARDCONTEXT_RPC hContext, const DWORD_RPC dwTimeout, const std::vector<scard_readerstate_rpc> & rgReaderStates, const DWORD_RPC cReaders);
  void recv_GetStatusChange(return_gsc& _return, const int32_t seqid);
  void Transmit(return_t& _return, const SCARDHANDLE_RPC hCard, const scard_io_request_rpc& pioSendPci, const LPBYTE_RPC& pbSendBuffer, const DWORD_RPC pcbRecvLength);
  int32_t send_Transmit(const SCARDHANDLE_RPC hCard, const scard_io_request_rpc& pioSendPci, const LPBYTE_RPC& pbSendBuffer, const DWORD_RPC pcbRecvLength);
  void recv_Transmit(return_t& _return, const int32_t seqid);
  LONG_RPC BeginTransaction(const SCARDHANDLE_RPC hCard);
  int32_t send_BeginTransaction(const SCARDHANDLE_RPC hCard);
  LONG_RPC recv_BeginTransaction(const int32_t seqid);
  LONG_RPC EndTransaction(const SCARDHANDLE_RPC hCard, const DWORD_RPC dwDisposition);
  int32_t send_EndTransaction(const SCARDHANDLE_RPC hCard, const DWORD_RPC dwDisposition);
  LONG_RPC recv_EndTransaction(const int32_t seqid);
  void GetAttrib(return_ga& _return, const SCARDHANDLE_RPC hCard, const DWORD_RPC dwAttrId, const DWORD_RPC pcbAttrLen);
  int32_t send_GetAttrib(const SCARDHANDLE_RPC hCard, const DWORD_RPC dwAttrId, const DWORD_RPC pcbAttrLen);
  void recv_GetAttrib(return_ga& _return, const int32_t seqid);
  void Control(return_ctrl& _return, const SCARDHANDLE_RPC hCard, const DWORD_RPC dwControlCode, const LPVOID_RPC& pbSendBuffer, const DWORD_RPC cbRecvLength);
  int32_t send_Control(const SCARDHANDLE_RPC hCard, const DWORD_RPC dwControlCode, const LPVOID_RPC& pbSendBuffer, const DWORD_RPC cbRecvLength);
  void recv_Control(return_ctrl& _return, const int32_t seqid);
  LONG_RPC Cancel(const SCARDCONTEXT_RPC hContext);
  int32_t send_Cancel(const SCARDCONTEXT_RPC hContext);
  LONG_RPC recv_Cancel(const int32_t seqid);
  LONG_RPC IsValidContext(const SCARDCONTEXT_RPC hContext);
  int32_t send_IsValidContext(const SCARDCONTEXT_RPC hContext);
  LONG_RPC recv_IsValidContext(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
